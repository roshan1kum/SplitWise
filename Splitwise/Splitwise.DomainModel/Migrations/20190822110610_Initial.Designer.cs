// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Splitwise.DomainModel.Model;
using System;

namespace Splitwise.DomainModel.Migrations
{
    [DbContext(typeof(SplitwiseContext))]
    [Migration("20190822110610_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Splitwise.DomainModel.Model.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cost");

                    b.Property<int>("CreaterId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<int?>("GrpId");

                    b.Property<int?>("PaidbyId");

                    b.HasKey("Id");

                    b.HasIndex("CreaterId");

                    b.HasIndex("GrpId");

                    b.HasIndex("PaidbyId");

                    b.ToTable("Expense");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("FreindId");

                    b.Property<int>("FriendId");

                    b.Property<int>("YourId");

                    b.HasKey("Id");

                    b.HasIndex("FreindId");

                    b.HasIndex("YourId");

                    b.ToTable("Friend");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CreatorId");

                    b.Property<bool>("Debt");

                    b.Property<string>("GroupName");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.GroupMembers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GrpId");

                    b.Property<int?>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("GrpId");

                    b.HasIndex("UserID");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Settlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<int?>("ToId");

                    b.Property<int?>("YourId");

                    b.HasKey("Id");

                    b.HasIndex("ToId");

                    b.HasIndex("YourId");

                    b.ToTable("Settlements");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.UserExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExpId");

                    b.Property<int>("SplitAmount");

                    b.Property<int?>("UsersId");

                    b.HasKey("Id");

                    b.HasIndex("ExpId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserExpenses");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Expense", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreaterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Splitwise.DomainModel.Model.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GrpId");

                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "Paiduser")
                        .WithMany()
                        .HasForeignKey("PaidbyId");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Friend", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("FreindId");

                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "Youruser")
                        .WithMany()
                        .HasForeignKey("YourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Group", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.GroupMembers", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Model.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GrpId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Settlement", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToId");

                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "Users")
                        .WithMany()
                        .HasForeignKey("YourId");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.UserExpense", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Model.Expense", "Expense")
                        .WithMany()
                        .HasForeignKey("ExpId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UsersId");
                });
#pragma warning restore 612, 618
        }
    }
}
