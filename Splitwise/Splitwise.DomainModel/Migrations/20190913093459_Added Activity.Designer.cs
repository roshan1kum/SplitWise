// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Splitwise.DomainModel.Model;
using System;

namespace Splitwise.DomainModel.Migrations
{
    [DbContext(typeof(SplitwiseContext))]
    [Migration("20190913093459_Added Activity")]
    partial class AddedActivity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("UserIdId");

                    b.HasKey("Id");

                    b.HasIndex("UserIdId");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cost");

                    b.Property<string>("CreaterId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<int?>("GrpId");

                    b.Property<string>("PaidbyId");

                    b.Property<string>("Split");

                    b.HasKey("Id");

                    b.HasIndex("CreaterId");

                    b.HasIndex("GrpId");

                    b.HasIndex("PaidbyId");

                    b.ToTable("Expense");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FriendId");

                    b.Property<string>("YourId");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.HasIndex("YourId");

                    b.ToTable("Friend");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.FriendBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Bill");

                    b.Property<int>("FriendExpId");

                    b.Property<string>("FriendId");

                    b.HasKey("Id");

                    b.HasIndex("FriendExpId");

                    b.HasIndex("FriendId");

                    b.ToTable("FriendBills");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.FriendExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Paidby");

                    b.Property<string>("Split");

                    b.HasKey("Id");

                    b.HasIndex("Paidby");

                    b.ToTable("FriendExpenses");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorId");

                    b.Property<bool>("Debt");

                    b.Property<string>("GroupName");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.GroupMembers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GrpId");

                    b.Property<string>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("GrpId");

                    b.HasIndex("UserID");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Settlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("GroupId");

                    b.Property<string>("ToId");

                    b.Property<string>("YourId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ToId");

                    b.HasIndex("YourId");

                    b.ToTable("Settlements");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.UserExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExpId");

                    b.Property<int>("SplitAmount");

                    b.Property<string>("UsersId");

                    b.HasKey("Id");

                    b.HasIndex("ExpId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserExpenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Activity", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("UserIdId");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Expense", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "CreaterExpense")
                        .WithMany()
                        .HasForeignKey("CreaterId");

                    b.HasOne("Splitwise.DomainModel.Model.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GrpId");

                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "Paiduser")
                        .WithMany()
                        .HasForeignKey("PaidbyId");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Friend", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("FriendId");

                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "Youruser")
                        .WithMany()
                        .HasForeignKey("YourId");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.FriendBill", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Model.FriendExpense", "FriendExpense")
                        .WithMany()
                        .HasForeignKey("FriendExpId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "FriendUser")
                        .WithMany()
                        .HasForeignKey("FriendId");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.FriendExpense", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "PaidbyUser")
                        .WithMany()
                        .HasForeignKey("Paidby");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Group", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "CreaterGroup")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.GroupMembers", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Model.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GrpId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.Settlement", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Model.Group", "GroupsId")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToId");

                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "FromUsers")
                        .WithMany()
                        .HasForeignKey("YourId");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Model.UserExpense", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Model.Expense", "Expense")
                        .WithMany()
                        .HasForeignKey("ExpId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Splitwise.DomainModel.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UsersId");
                });
#pragma warning restore 612, 618
        }
    }
}
